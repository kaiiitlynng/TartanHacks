{"version":3,"sources":["store.js","components/Text.js","diamonds/BackfaceMaterial.js","diamonds/RefractionMaterial.js","blocks.js","diamonds/Diamonds.js","components/CustomMaterial.js","components/Plane.js","index.js"],"names":["state","sections","pages","zoom","paragraphs","offset","factor","header","image","aspect","text","stripes","color","height","diamonds","x","pos","Vector3","scale","top","createRef","Text","children","size","left","right","bottom","opacity","layers","font","props","data","useLoader","FontLoader","geom","useAsset","Promise","res","TextBufferGeometry","curveSegments","onUpdate","useCallback","self","box","geometry","computeBoundingBox","boundingBox","getSize","position","y","ref","useRef","last","current","useFrame","shift","lerp","frustumCulled","transparent","BackfaceMaterial","vertexShader","fragmentShader","side","BackSide","ShaderMaterial","RefractionMaterial","options","uniforms","envMap","value","backfaceMap","resolution","offsetContext","createContext","Block","useBlock","parentOffset","sectionHeight","undefined","curY","curTop","Provider","useThree","viewport","useContext","viewportWidth","width","viewportHeight","canvasWidth","canvasHeight","mobile","margin","contentMaxWidth","offsetFactor","dummy","Object3D","Diamonds","nodes","GLTFLoader","useLayoutEffect","pCone1_lambert1_0","center","gl","scene","camera","clock","model","ratio","getPixelRatio","useMemo","envFbo","WebGLRenderTarget","backfaceFbo","texture","backfaceMaterial","refractionMaterial","forEach","i","t","getElapsedTime","s","set","copy","length","rotation","updateMatrix","setMatrixAt","matrix","instanceMatrix","needsUpdate","autoClear","setRenderTarget","clearColor","render","clearDepth","material","args","CustomMaterial","tex","hasTexture","Color","this","extend","Plane","forwardRef","map","Startup","Paragraph","index","w","alignRight","pixelWidth","Html","style","textAlign","tabIndex","Content","images","TextureLoader","minFilter","LinearFilter","className","Math","PI","App","scrollArea","onScroll","e","target","scrollTop","useEffect","linear","dpr","orthographic","fallback","Array","fill","_","id","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.e105caf4.chunk.js","sourcesContent":["import { createRef } from \"react\"\nimport { Vector3 } from \"three\"\n\nconst state = {\n  sections: 9,\n  pages: 8,\n  zoom: 75,\n  paragraphs: [\n    {\n      offset: 1,\n      factor: 1.75,\n      header: \"RETROFUTURISM\",\n      image: \"- Syd Mead.jpeg\",\n      aspect: 1.51,\n      text: \"retrofuturism is an art movement where artists visualized the future through the perspective of a non-futuristic age. retro2future embraces this idea: visualizing modern 3D through the perspective of archaic 2D, distorting and disrupting reality.\"\n    },\n    {\n      offset: 2,\n      factor: 2.0,\n      header: \"THE YEAR 2000 PROBLEM\",\n      image: \"nsync.jpeg\",\n      aspect: 1.5,\n      text: \"anticipated computer errors related to calendar dates after 1999 disrupted daily life as people prepared for a technological apocalypse. out of this emerged “Y2K” - an optimistic unconventional aesthetic filled with metallic shiny clothing, ultity wear, and cyber-accessories. we seek to infuse retro2future with the spirit of y2k: positive disruption.\"\n    },\n    {\n      offset: 3,\n      factor: 2.25,\n      header: \"POSTIIVE DISRUPTION\",\n      image: \"model.png\",\n      aspect: 1.5037,\n      text: \"oftentimes disruption is considered in a negative context: tantrum, violence, war. with retro2future, we want to emphasize the benefit of disruption: 3D distortion to improve our understanding of schematics and scans with an aesthetic inspired by optimism in the future.\"\n    },\n  ],\n  stripes: [\n    { offset: 0, color: \"#000\", height: 13 },\n    { offset: 6.3, color: \"#000\", height: 20 }\n  ],\n  diamonds: [\n    { x: 0, offset: 0.15, pos: new Vector3(), scale: 0, factor: 4 },\n    { x: 2, offset: 1.1, pos: new Vector3(), scale: 1.8, factor: 2.1 },\n    { x: -5, offset: 2, pos: new Vector3(), scale: 1.8, factor: 2.5 },\n    { x: 0, offset: 3.2, pos: new Vector3(), scale: 1.8, factor: 1.75 },\n    { x: 0, offset: 8, pos: new Vector3(), scale: 2.5, factor: 6 }\n  ],\n  top: createRef()\n}\n\nexport default state\n","import { FontLoader, Vector3, TextBufferGeometry } from \"three\"\nimport React, { useCallback, useRef } from \"react\"\nimport { useLoader, useFrame } from \"@react-three/fiber\"\nimport { useAsset } from \"use-asset\"\nimport lerp from \"lerp\"\nimport state from \"../store\"\n\nfunction Text({ children, size = 1, left, right, top, bottom, color = \"white\", opacity = 1, height = 0.01, layers = 0, font = \"/cageroll.json\", ...props }) {\n  const data = useLoader(FontLoader, font)\n  const geom = useAsset(() => new Promise((res) => res(new TextBufferGeometry(children, { font: data, size: 1, height, curveSegments: 32 }))), [children])\n  const onUpdate = useCallback(\n    (self) => {\n      const box = new Vector3()\n      self.geometry.computeBoundingBox()\n      self.geometry.boundingBox.getSize(box)\n      self.position.x = left ? 0 : right ? -box.x : -box.x / 2\n      self.position.y = top ? 0 : bottom ? -box.y : -box.y / 2\n    },\n    [left, right, top, bottom]\n  )\n\n  const ref = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    ref.current.shift = lerp(ref.current.shift, (state.top.current - last) / 100, 0.1)\n    last = state.top.current\n  })\n\n  return (\n    <group {...props} scale={[size, size, 0.1]}>\n      <mesh geometry={geom} onUpdate={onUpdate} frustumCulled={false}>\n        <customMaterial ref={ref} color={color} transparent opacity={opacity} />\n      </mesh>\n    </group>\n  )\n}\n\nconst MultilineText = ({ text, size = 1, lineHeight = 1, position = [0, 0, 0], ...props }) =>\n  text.split(\"\\n\").map((text, index) => <Text key={index} size={size} {...props} position={[position[0], position[1] - index * lineHeight, position[2]]} children={text} />)\n\nexport { Text, MultilineText }\n","import { ShaderMaterial, BackSide } from \"three\"\n\nexport default class BackfaceMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize(modelViewMatrix * transformedNormal).xyz;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `varying vec3 worldNormal;\n      void main() {\n        gl_FragColor = vec4(worldNormal, 1.0);\n      }`,\n      side: BackSide\n    })\n  }\n}\n","import { ShaderMaterial } from \"three\"\n\nexport default class RefractionMaterial extends ShaderMaterial {\n  constructor(options) {\n    super({\n      vertexShader: `varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      void main() {\n        vec4 transformedNormal = vec4(normal, 0.);\n        vec4 transformedPosition = vec4(position, 1.0);\n        #ifdef USE_INSTANCING\n          transformedNormal = instanceMatrix * transformedNormal;\n          transformedPosition = instanceMatrix * transformedPosition;\n        #endif\n        worldNormal = normalize( modelViewMatrix * transformedNormal).xyz;\n        viewDirection = normalize((modelMatrix * vec4( position, 1.0)).xyz - cameraPosition);;\n        gl_Position = projectionMatrix * modelViewMatrix * transformedPosition;\n      }`,\n      fragmentShader: `uniform sampler2D envMap;\n      uniform sampler2D backfaceMap;\n      uniform vec2 resolution;\n      varying vec3 worldNormal;\n      varying vec3 viewDirection;\n      float fresnelFunc(vec3 viewDirection, vec3 worldNormal) {\n        return pow(1.05 + dot(viewDirection, worldNormal), 100.0);\n      }\n      void main() {\n        vec2 uv = gl_FragCoord.xy / resolution;\n        vec3 normal = worldNormal * (1.0 - 0.7) - texture2D(backfaceMap, uv).rgb * 0.7;\n        vec4 color = texture2D(envMap, uv += refract(viewDirection, normal, 1.0/1.5).xy);\n        //gl_FragColor = vec4(mix(color.rgb, vec3(0.15), fresnelFunc(viewDirection, normal)), 1.0);\n        gl_FragColor = vec4(mix(color.rgb, vec3(0.4), fresnelFunc(viewDirection, normal)), 1.0);\n      }`,\n      uniforms: {\n        envMap: { value: options.envMap },\n        backfaceMap: { value: options.backfaceMap },\n        resolution: { value: options.resolution }\n      }\n    })\n  }\n}\n","import React, { createContext, useRef, useContext } from \"react\"\nimport { useFrame, useThree } from \"@react-three/fiber\"\nimport lerp from \"lerp\"\nimport state from \"./store\"\n\nconst offsetContext = createContext(0)\n\nfunction Block({ children, offset, factor, ...props }) {\n  const { offset: parentOffset, sectionHeight } = useBlock()\n  const ref = useRef()\n  offset = offset !== undefined ? offset : parentOffset\n  useFrame(() => {\n    const curY = ref.current.position.y\n    const curTop = state.top.current\n    ref.current.position.y = lerp(curY, (curTop / state.zoom) * factor, 0.1)\n  })\n  return (\n    <offsetContext.Provider value={offset}>\n      <group {...props} position={[0, -sectionHeight * offset * factor, 0]}>\n        <group ref={ref}>{children}</group>\n      </group>\n    </offsetContext.Provider>\n  )\n}\n\nfunction useBlock() {\n  const { sections, pages, zoom } = state\n  const { size, viewport } = useThree()\n  const offset = useContext(offsetContext)\n  const viewportWidth = viewport.width * zoom\n  const viewportHeight = viewport.height * zoom\n  const canvasWidth = viewportWidth / zoom\n  const canvasHeight = viewportHeight / zoom\n  const mobile = size.width < 700\n  const margin = canvasWidth * (mobile ? 0.2 : 0.1)\n  const contentMaxWidth = canvasWidth * (mobile ? 0.8 : 0.6)\n  const sectionHeight = canvasHeight * ((pages - 1) / (sections - 1))\n  const offsetFactor = (offset + 1.0) / sections\n  return {\n    viewport,\n    offset,\n    viewportWidth,\n    viewportHeight,\n    canvasWidth,\n    canvasHeight,\n    mobile,\n    margin,\n    contentMaxWidth,\n    sectionHeight,\n    offsetFactor\n  }\n}\n\nexport { Block, useBlock }\n","import { WebGLRenderTarget, Object3D } from \"three\"\nimport React, { useRef, useMemo, useLayoutEffect } from \"react\"\nimport { useLoader, useThree, useFrame } from \"@react-three/fiber\"\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\nimport lerp from \"lerp\"\nimport BackfaceMaterial from \"./BackfaceMaterial\"\nimport RefractionMaterial from \"./RefractionMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst dummy = new Object3D()\nexport default function Diamonds() {\n  const { nodes } = useLoader(GLTFLoader, \"/diamondedit.glb\")\n  useLayoutEffect(() => nodes.pCone1_lambert1_0.geometry.center(), [])\n\n  const { size, gl, scene, camera, clock } = useThree()\n  const { contentMaxWidth, sectionHeight, mobile } = useBlock()\n  const model = useRef()\n  const ratio = gl.getPixelRatio()\n\n  const [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial] = useMemo(() => {\n    const envFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceFbo = new WebGLRenderTarget(size.width * ratio, size.height * ratio)\n    const backfaceMaterial = new BackfaceMaterial()\n    const refractionMaterial = new RefractionMaterial({\n      envMap: envFbo.texture,\n      backfaceMap: backfaceFbo.texture,\n      resolution: [size.width * ratio, size.height * ratio]\n    })\n    return [envFbo, backfaceFbo, backfaceMaterial, refractionMaterial]\n  }, [size, ratio])\n\n  useFrame(() => {\n    state.diamonds.forEach((data, i) => {\n      const t = clock.getElapsedTime() / 2\n      const { x, offset, scale, factor } = data\n      const s = (contentMaxWidth / 35) * scale\n      data.pos.set(mobile ? 0 : x, lerp(data.pos.y, -sectionHeight * offset * factor + (state.top.current / state.zoom) * factor, 0.1), 0)\n      dummy.position.copy(data.pos)\n      if (i === state.diamonds.length - 1) dummy.rotation.set(0, t, 0)\n      else dummy.rotation.set(t, t, t)\n      dummy.scale.set(s, s, s)\n      dummy.updateMatrix()\n      model.current.setMatrixAt(i, dummy.matrix)\n      model.current.instanceMatrix.needsUpdate = true\n    })\n\n    gl.autoClear = false\n    camera.layers.set(0)\n    gl.setRenderTarget(envFbo)\n    gl.clearColor()\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = backfaceMaterial\n    gl.setRenderTarget(backfaceFbo)\n    gl.clearDepth()\n    gl.render(scene, camera)\n    camera.layers.set(0)\n    gl.setRenderTarget(null)\n    gl.render(scene, camera)\n    gl.clearDepth()\n    camera.layers.set(1)\n    model.current.material = refractionMaterial\n    gl.render(scene, camera)\n  }, 1)\n\n  return <instancedMesh ref={model} layers={1} args={[nodes.pCone1_lambert1_0.geometry, null, state.diamonds.length]} position={[0, 0, 50]} />\n}\n","import { ShaderMaterial, Color } from \"three\"\nimport { extend } from \"@react-three/fiber\"\n\nclass CustomMaterial extends ShaderMaterial {\n  constructor() {\n    super({\n      vertexShader: `uniform float scale;\n      uniform float shift;\n      varying vec2 vUv;\n      void main() {\n        vec3 pos = position;\n        pos.y = pos.y + ((sin(uv.x * 3.1415926535897932384626433832795) * shift * 2.0) * 0.125);\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(pos,1.);\n      }`,\n      fragmentShader: `uniform sampler2D tex;\n      uniform float hasTexture;\n      uniform float shift;\n      uniform float scale;\n      uniform vec3 color;\n      uniform float opacity;\n      varying vec2 vUv;\n      void main() {\n        float angle = 1.55;\n        vec2 p = (vUv - vec2(0.5, 0.5)) * (1.0 - scale) + vec2(0.5, 0.5);\n        vec2 offset = shift / 4.0 * vec2(cos(angle), sin(angle));\n        vec4 cr = texture2D(tex, p + offset);\n        vec4 cga = texture2D(tex, p);\n        vec4 cb = texture2D(tex, p - offset);\n        if (hasTexture == 1.0) gl_FragColor = vec4(cr.r, cga.g, cb.b, cga.a);\n        else gl_FragColor = vec4(color, opacity);\n      }`,\n      uniforms: {\n        tex: { value: null },\n        hasTexture: { value: 0 },\n        scale: { value: 0 },\n        shift: { value: 0 },\n        opacity: { value: 1 },\n        color: { value: new Color(\"white\") }\n      }\n    })\n  }\n\n  set scale(value) {\n    this.uniforms.scale.value = value\n  }\n\n  get scale() {\n    return this.uniforms.scale.value\n  }\n\n  set shift(value) {\n    this.uniforms.shift.value = value\n  }\n\n  get shift() {\n    return this.uniforms.shift.value\n  }\n\n  set map(value) {\n    this.uniforms.hasTexture.value = !!value\n    this.uniforms.tex.value = value\n  }\n\n  get map() {\n    return this.uniforms.tex.value\n  }\n\n  get color() {\n    return this.uniforms.color.value\n  }\n\n  get opacity() {\n    return this.uniforms.opacity.value\n  }\n\n  set opacity(value) {\n    if (this.uniforms) this.uniforms.opacity.value = value\n  }\n}\n\nextend({ CustomMaterial })\n","import React, { forwardRef, useRef } from \"react\"\nimport { useFrame } from \"@react-three/fiber\"\nimport lerp from \"lerp\"\nimport \"./CustomMaterial\"\nimport { useBlock } from \"../blocks\"\nimport state from \"../store\"\n\nconst Plane = forwardRef(({ color = \"white\", shift = 1, opacity = 1, args, map, ...props }, ref) => {\n  const { viewportHeight, offsetFactor } = useBlock()\n  const material = useRef()\n  let last = state.top.current\n  useFrame(() => {\n    const { pages, top } = state\n    material.current.scale = lerp(material.current.scale, offsetFactor - top.current / ((pages - 1) * viewportHeight), 0.1)\n    material.current.shift = lerp(material.current.shift, ((top.current - last) / shift) * 1.5, 0.1)\n    last = top.current\n  })\n  return (\n    <mesh ref={ref} {...props}>\n      <planeBufferGeometry args={args} />\n      <customMaterial ref={material} color={color} map={map} transparent opacity={opacity} />\n    </mesh>\n  )\n})\n\nexport default Plane\n","import ReactDOM from \"react-dom\"\nimport React, { Suspense, useEffect, useRef, useMemo } from \"react\"\nimport { Canvas, useLoader, useFrame } from \"@react-three/fiber\"\nimport { Html } from \"@react-three/drei\"\nimport { TextureLoader, LinearFilter } from \"three\"\nimport lerp from \"lerp\"\nimport { Text, MultilineText } from \"./components/Text\"\nimport Diamonds from \"./diamonds/Diamonds\"\nimport Plane from \"./components/Plane\"\nimport { Block, useBlock } from \"./blocks\"\nimport state from \"./store\"\nimport \"./styles.css\"\n\nfunction Startup() {\n  const ref = useRef()\n  useFrame(() => (ref.current.material.opacity = lerp(ref.current.material.opacity, 0, 0.025)))\n  return <Plane ref={ref} color=\"#0e0e0f\" position={[0, 0, 200]} scale={[100, 100, 1]} />\n}\n\nfunction Paragraph({ image, index, offset, factor, header, aspect, text }) {\n  const { contentMaxWidth: w, canvasWidth, margin, mobile } = useBlock()\n  const size = aspect < 1 && !mobile ? 0.65 : 1\n  const alignRight = (canvasWidth - w * size - margin) / 2\n  const pixelWidth = w * state.zoom * size\n  const left = !(index % 2)\n  const color = index % 2 ? \"#D40749\" : \"#4ba4d6\"\n  return (\n    <Block factor={factor} offset={offset}>\n      <group position={[left ? -alignRight : alignRight, 0, 0]}>\n        <Plane map={image} args={[1, 1, 32, 32]} shift={75} size={size} aspect={aspect} scale={[w * size, (w * size) / aspect, 1]} frustumCulled={false} />\n        <Html\n          style={{ width: pixelWidth / (mobile ? 1 : 2), textAlign: left ? \"left\" : \"right\" }}\n          position={[left || mobile ? (-w * size) / 2 : 0, (-w * size) / 2 / aspect - 0.4, 1]}>\n          <div tabIndex={index}>{text}</div>\n        </Html>\n        <Text left={left} right={!left} size={w * 0.04} color={color} top position={[((left ? -w : w) * size) / 2, (w * size) / aspect / 2 + 0.5, -1]}>\n          {header}\n        </Text>\n        <Block factor={0.2}>\n          <Text opacity={0.5} size={w * 0.5} color=\"#1A1E2A\" position={[((left ? w : -w) / 2) * size, (w * size) / aspect / 1, -10]}>\n            {\"0\" + (index + 1)}\n          </Text>\n        </Block>\n      </group>\n    </Block>\n  )\n}\n\nfunction Content() {\n  const images = useLoader(\n    TextureLoader,\n    state.paragraphs.map(({ image }) => image)\n  )\n  useMemo(() => images.forEach((texture) => (texture.minFilter = LinearFilter)), [images])\n  const { contentMaxWidth: w, canvasWidth, canvasHeight, mobile } = useBlock()\n  return (\n    <>\n      <Block factor={1} offset={0}>\n        <Block factor={1}>\n          <Text center size={1} position={[w/7, 1.5, -1]} color=\"#BDBDBD\">\n            {\"RETRO2FUTURE\"}\n          </Text>\n        </Block>\n        <Block factor={1}>\n          <Text center size={1} position={[w/7, 0.5, -1]} color=\"white\">\n            {\"RETRO2FUTURE\"}\n          </Text>\n        </Block>\n        <Block factor={1}>\n          <Text center size={1} position={[w/7, 2.5, -1]} color=\"#888888\">\n            {\"RETRO2FUTURE\"}\n          </Text>\n        </Block>\n        <Block factor={1}>\n          <Text center size={1} position={[w/7, 3.5, -1]} color=\"#535353\">\n            {\"RETRO2FUTURE\"}\n          </Text>\n        </Block>\n        <Block factor={1.0}>\n          <Html className=\"bottom-left\" style={{ color: \"white\" }} position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n            transformation. distortion. disruption.\n          </Html>\n        </Block>\n      </Block>\n      {state.paragraphs.map((props, index) => (\n        <Paragraph key={index} index={index} {...props} image={images[index]} />\n      ))}\n      {state.stripes.map(({ offset, color, height }, index) => (\n        <Block key={index} factor={-1.5} offset={offset}>\n          <Plane args={[50, height, 32, 32]} shift={-4} color={color} rotation={[0, 0, Math.PI / 8]} position={[0, 0, -10]} />\n        </Block>\n      ))}\n      <Block factor={1.25} offset={8}>\n        <Html style={{ color: \"white\" }} className=\"bottom-left\" position={[-canvasWidth / 2, -canvasHeight / 2, 0]}>\n          #SaveLoona\n        </Html>\n      </Block>\n    </>\n  )\n}\n\nfunction App() {\n  const scrollArea = useRef()\n  const onScroll = (e) => (state.top.current = e.target.scrollTop)\n  useEffect(() => void onScroll({ target: scrollArea.current }), [])\n  return (\n    <>\n      <Canvas linear dpr={[1, 2]} orthographic camera={{ zoom: state.zoom, position: [0, 0, 500] }}>\n        <Suspense fallback={<Html center className=\"loading\" children=\"Loading...\" />}>\n          <Content />\n          <Diamonds />\n          <Startup />\n        </Suspense>\n      </Canvas>\n      <div className=\"scrollArea\" ref={scrollArea} onScroll={onScroll}>\n        {new Array(state.sections).fill().map((_, index) => (\n          <div key={index} id={\"0\" + index} style={{ height: `${(state.pages / state.sections) * 100}vh` }} />\n        ))}\n      </div>\n    </>\n  )\n}\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\n"],"sourceRoot":""}